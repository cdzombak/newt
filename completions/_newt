#compdef newt
# shellcheck disable=all

_newt() {
    local curcontext="$curcontext" state line ret=1
    local -a branches worktrees

    _arguments -C \
        '(-b -d -l -h --help -v --version)'{-h,--help}'[Show help]' \
        '(-b -d -l -h --help -v --version)'{-v,--version}'[Show version]' \
        '(-b -d -l -h --help -v --version)-l[List worktrees with merge status]' \
        '(-b -d -l -h --help -v --version)-b[Create a new branch and worktree]: :->branch_name' \
        '(-b -d -l -h --help -v --version)-d[Delete a worktree and its branch]: :->worktree' \
        '(-b -d -l -h --help -v --version)1: :->branch' \
        && ret=0

    case $state in
        branch)
            local repo_root
            repo_root="$(git rev-parse --show-toplevel 2>/dev/null)" || return 1
            branches=(${(f)"$(git -C "$repo_root" for-each-ref --format='%(refname:short)' refs/heads/ 2>/dev/null)"})
            _describe -t branches 'branch' branches && ret=0
            ;;
        branch_name)
            # No completion for new branch names
            _message 'new branch name' && ret=0
            ;;
        worktree)
            _newt_worktrees && ret=0
            ;;
    esac

    return ret
}

_newt_worktrees() {
    local repo_root worktree_base
    repo_root="$(git rev-parse --show-toplevel 2>/dev/null)" || return 1
    worktree_base="${repo_root}/.newt"

    if [[ -d "$worktree_base" ]]; then
        local -a worktrees
        worktrees=(${(f)"$(cd "$worktree_base" && ls -1d */ 2>/dev/null | sed 's|/||')"})
        _describe 'worktree' worktrees
    fi
}

# The completion function is called by zsh's completion system automatically
# Do not call it here - just define it
